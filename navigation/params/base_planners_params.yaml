## TODO 10
TrajectoryPlannerROS:
  # max_vel_x: 2.0
  # min_vel_x: -2.0
  # max_vel_y: 0.0
  # min_vel_y: 0.0

  # # The velocity when robot is moving in a straight line
  # max_trans_vel:  2.0
  # min_trans_vel:  0.0

  # max_rot_vel: 0.75
  # min_rot_vel: 0.0

  
  # max_vel_theta:  0.7
  # min_vel_theta: -0.7
  # min_in_place_vel_theta: 0.1

  # ## TODO 2
  # acc_lim_x: 1.0
  # acc_lim_y: 0.0
  # acc_lim_theta: 0.4

  # holonomic_robot: false

  # # New Stuff

  # escape_vel: -0.2

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.5235  # in rads
  # xy_goal_tolerance: 0.2  # in meters
  # latch_xy_goal_tolerance: false

  # # Forward Simulation Parameters
  #   # these parameters change how the planner simulates trajectories at each update and therefore changes the optimal trajectory that is chosen
  #   # These should be adjusted based on your computer performance
  # sim_time: 2.0   # setting time of each simulation that it must evaluate. Higher will create longer curves but too low can limit performance (<2)
  # sim_granularity: 0.02 # the step size to take between points on a trajectory, or how frequent should the points on this trajectory should be examined
  # angular_sim_granularity: 0.02
  # vx_samples: 10  # how many samples of x velocity are taken for simulated trajectories
  # vtheta_samples: 30 # how many samples of theta velocity are taken for simulated trajectories
  # controller_frequency: 1.0  # how often the planning algorithm is performed (hz)

  # # Trajectory scoring parameters
  # meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
  occdist_scale:  0.3 #The weighting for how much the controller should attempt to avoid obstacles. default 0.01
  pdist_scale: 0.2  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
  # gdist_scale: 1.0 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8

  # heading_lookahead: 0.325  #How far to look ahead in meters when scoring different in-place-rotation trajectories
  # heading_scoring: false  #Whether to score based on the robot's heading to the path or its distance from the path. default false
  # heading_scoring_timestep: 0.8   #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
  # dwa: true #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  # simple_attractor: false
  # publish_cost_grid_pc: true  

  # # Oscillation Prevention Parameters
  # oscillation_reset_dist: 0.25 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
  # escape_reset_dist: 0.1
  # escape_reset_theta: 0.1

  # # Debugging
  # publish_traj_pc : true
  # publish_cost_grid_pc: true


DWAPlannerROS:
  # Robot configuration parameters  
  max_vel_x: 2.0
  min_vel_x: -2.0
  max_vel_y: 0.0
  min_vel_y: 0.0

  # The velocity when robot is moving in a straight line
  max_trans_vel:  2.0
  min_trans_vel:  -2.0

  max_rot_vel: 1.0
  min_rot_vel: 0.5

  
  max_vel_theta:  0.9
  min_vel_theta: -0.9
  min_in_place_vel_theta: 0.1

  acc_lim_x: 1.0
  acc_lim_y: 0.0
  acc_lim_theta: 0.4

  # Goal Tolerance Parametes
  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.1
  latch_xy_goal_tolerance: false

  # Forward Simulation Parameters
  sim_time: 3
  vx_samples: 20
  vy_samples: 0
  vth_samples: 40
  controller_frequency: 10.0

  # Trajectory Scoring Parameters
  path_distance_bias: 32.0    #weight for how much the local planner should stay close to the global path high value will make the local planner prefer trajectories on global path
  goal_distance_bias: 20.0
  ## is the weight for how much the robot should attempt to
  # reach the local goal, with whatever path. Experiments show that increasing this
  # parameter enables the robot to be less attached to the global path.
  occdist_scale: 0.02
  # occdist scale is the weight for how much the robot should attempt to avoid obstacles.
  # A high value for this parameter results in indecisive robot that stucks in place
  # dwa: true #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout

  # forward_point_distance: 0.325
  # stop_time_buffer: 0.2
  # scaling_speed: 0.25
  # max_scaling_factor: 0.2

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05

  # Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true

# global_planner params                                      
GlobalPlanner: 
  use_dijkstra: false     ## Uses A* algorithm 
  use_grid_path: true  # for A*, grid path should be true: If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.                                           
  default_tolerance: 0.2 
  cost_factor: 3.55                                        
  neutral_cost: 66                                           
  lethal_cost: 253
  visualize potential: true

NavfnROS:
  allow_unknown: false # Specifies whether or not to allow navfn to create plans that traverse unknown space.
  default_tolerance: 0.1 # A tolerance on the goal point for the planner.
  visualize potential: false
  # cost factor: 3.55


# EBandPlannerROS:
#   max_vel_lin: 0.5
#   max_vel_th: 0.75
#   min_vel_lin: 0.1
#   min_vel_th: 0.0
#   max_acceleration: 0.5
#   max_translational_acceleration: 0.5
#   max_rotational_acceleration: 0.2

#   xy_goal_tolerance: 0.2
#   yaw_goal_tolerance: 0.1